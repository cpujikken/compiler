type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | TRUE
  | FALSE
  | NOT
  | MINUS
  | PLUS
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | AST
  | SLASH_DOT
  | SLASH
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
(* parserが利用する変数、関数、型などの定義 *)
open Syntax
let addtyp x info = (x, Type.gentyp info)
# 45 "parser.ml"
let yytransl_const = [|
  260 (* TRUE *);
  261 (* FALSE *);
  262 (* NOT *);
  263 (* MINUS *);
  264 (* PLUS *);
  265 (* MINUS_DOT *);
  266 (* PLUS_DOT *);
  267 (* AST_DOT *);
  268 (* AST *);
  269 (* SLASH_DOT *);
  270 (* SLASH *);
  271 (* EQUAL *);
  272 (* LESS_GREATER *);
  273 (* LESS_EQUAL *);
  274 (* GREATER_EQUAL *);
  275 (* LESS *);
  276 (* GREATER *);
  277 (* IF *);
  278 (* THEN *);
  279 (* ELSE *);
  281 (* LET *);
  282 (* IN *);
  283 (* REC *);
  284 (* COMMA *);
  285 (* ARRAY_CREATE *);
  286 (* DOT *);
  287 (* LESS_MINUS *);
  288 (* SEMICOLON *);
  289 (* LPAREN *);
  290 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  280 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\007\000\007\000\
\004\000\004\000\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\006\000\005\000\002\000\001\000\008\000\
\007\000\003\000\002\000\003\000\001\000\004\000\002\000\001\000\
\002\000\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\037\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\024\000\
\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\039\000\000\000\000\000\046\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\016\000\053\000\046\000\017\000\055\000\082\000"

let yysindex = "\002\000\
\052\255\000\000\000\000\000\000\000\000\000\000\052\255\052\255\
\052\255\052\255\000\000\045\255\092\255\199\255\180\003\226\254\
\230\254\092\255\092\255\092\255\040\003\246\254\252\254\244\254\
\247\254\140\255\000\000\212\002\052\255\052\255\052\255\052\255\
\052\255\012\255\052\255\014\255\052\255\052\255\052\255\052\255\
\052\255\052\255\052\255\052\255\243\254\092\255\241\254\052\255\
\052\255\052\255\052\255\251\254\250\254\249\254\232\254\245\254\
\243\254\000\000\224\255\224\255\224\255\224\255\000\004\000\000\
\000\004\000\000\120\255\120\255\120\255\120\255\120\255\120\255\
\236\003\180\003\243\254\052\255\236\003\068\003\096\003\124\003\
\251\254\008\255\052\255\000\255\001\255\011\255\052\255\240\002\
\052\255\052\255\052\255\000\000\052\255\180\003\000\000\000\000\
\052\255\012\003\002\255\208\003\180\003\180\003\180\003\152\003\
\000\000\052\255\052\255\208\003\180\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\035\000\
\147\000\175\000\203\000\231\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\030\001\063\000\005\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\091\000\000\000\116\001\144\001\172\001\200\001\060\001\000\000\
\088\001\000\000\224\001\252\001\026\002\051\002\072\002\093\002\
\100\002\145\002\119\000\000\000\113\002\000\000\000\000\000\000\
\029\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\147\002\000\000\000\000\
\000\000\000\000\001\000\127\002\165\002\171\002\019\255\000\000\
\000\000\000\000\000\000\140\002\184\002"

let yygindex = "\000\000\
\255\255\089\000\000\000\000\000\000\000\000\000\226\255"

let yytablesize = 1313
let yytable = "\047\000\
\007\000\048\000\001\000\085\000\050\000\018\000\019\000\020\000\
\021\000\086\000\051\000\052\000\028\000\064\000\054\000\066\000\
\056\000\076\000\081\000\083\000\084\000\087\000\093\000\095\000\
\096\000\097\000\047\000\059\000\060\000\061\000\062\000\063\000\
\106\000\065\000\008\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\040\000\038\000\022\000\077\000\078\000\
\079\000\080\000\092\000\003\000\004\000\005\000\006\000\000\000\
\000\000\007\000\008\000\000\000\009\000\000\000\042\000\000\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\024\000\
\010\000\000\000\088\000\011\000\012\000\025\000\000\000\000\000\
\013\000\094\000\000\000\000\000\014\000\098\000\000\000\100\000\
\101\000\102\000\036\000\103\000\004\000\005\000\006\000\104\000\
\000\000\000\000\000\000\000\000\000\000\026\000\000\000\045\000\
\108\000\109\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\000\000\057\000\011\000\045\000\000\000\041\000\000\000\
\004\000\005\000\006\000\000\000\014\000\000\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\075\000\000\000\
\000\000\000\000\000\000\000\000\004\000\005\000\006\000\011\000\
\000\000\000\000\031\000\045\000\045\000\045\000\045\000\045\000\
\014\000\045\000\000\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\011\000\000\000\045\000\045\000\045\000\
\045\000\056\000\000\000\000\000\014\000\000\000\009\000\000\000\
\045\000\000\000\000\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\045\000\000\000\045\000\045\000\045\000\045\000\
\045\000\000\000\000\000\000\000\045\000\045\000\003\000\004\000\
\005\000\006\000\010\000\000\000\007\000\008\000\000\000\009\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\011\000\012\000\
\004\000\005\000\006\000\013\000\000\000\000\000\020\000\014\000\
\027\000\000\000\033\000\034\000\035\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\007\000\007\000\007\000\030\000\000\000\000\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\000\000\007\000\007\000\
\007\000\000\000\007\000\000\000\007\000\035\000\007\000\000\000\
\007\000\007\000\007\000\008\000\008\000\008\000\000\000\000\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\000\000\
\008\000\008\000\008\000\023\000\008\000\000\000\008\000\042\000\
\042\000\042\000\008\000\008\000\008\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\000\000\042\000\042\000\042\000\025\000\
\042\000\000\000\042\000\036\000\036\000\036\000\042\000\042\000\
\042\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\000\000\
\036\000\036\000\036\000\012\000\036\000\000\000\036\000\041\000\
\041\000\041\000\036\000\036\000\036\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\000\000\041\000\041\000\041\000\011\000\
\041\000\000\000\041\000\031\000\031\000\031\000\041\000\041\000\
\041\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\000\000\
\031\000\031\000\031\000\022\000\031\000\000\000\000\000\000\000\
\000\000\000\000\031\000\031\000\031\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\000\000\009\000\009\000\000\000\021\000\
\009\000\000\000\009\000\000\000\000\000\000\000\009\000\000\000\
\009\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\013\000\
\010\000\010\000\000\000\000\000\010\000\000\000\010\000\000\000\
\000\000\000\000\010\000\000\000\010\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\014\000\020\000\020\000\000\000\000\000\
\020\000\000\000\020\000\000\000\000\000\000\000\020\000\000\000\
\020\000\000\000\000\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\017\000\030\000\030\000\000\000\000\000\030\000\000\000\
\030\000\000\000\000\000\000\000\030\000\035\000\030\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\018\000\035\000\035\000\000\000\000\000\035\000\
\000\000\035\000\000\000\000\000\000\000\035\000\000\000\035\000\
\000\000\000\000\023\000\023\000\023\000\023\000\023\000\015\000\
\023\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\000\000\023\000\023\000\000\000\000\000\023\000\000\000\023\000\
\000\000\000\000\000\000\023\000\016\000\023\000\025\000\025\000\
\025\000\025\000\025\000\044\000\025\000\000\000\025\000\025\000\
\025\000\025\000\025\000\025\000\000\000\025\000\025\000\000\000\
\043\000\025\000\000\000\025\000\000\000\000\000\000\000\025\000\
\000\000\025\000\012\000\012\000\012\000\012\000\019\000\000\000\
\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\000\000\012\000\012\000\033\000\000\000\012\000\000\000\012\000\
\034\000\000\000\029\000\012\000\000\000\012\000\011\000\011\000\
\011\000\011\000\000\000\000\000\000\000\000\000\011\000\011\000\
\011\000\011\000\011\000\011\000\027\000\011\000\011\000\000\000\
\000\000\011\000\028\000\011\000\000\000\000\000\000\000\011\000\
\000\000\011\000\022\000\022\000\022\000\022\000\000\000\032\000\
\000\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\
\000\000\022\000\022\000\000\000\000\000\022\000\000\000\022\000\
\000\000\000\000\000\000\022\000\000\000\022\000\021\000\021\000\
\021\000\021\000\000\000\000\000\000\000\000\000\021\000\021\000\
\021\000\021\000\021\000\021\000\000\000\021\000\021\000\000\000\
\000\000\021\000\000\000\021\000\000\000\000\000\000\000\021\000\
\000\000\021\000\000\000\000\000\000\000\000\000\013\000\013\000\
\013\000\013\000\013\000\013\000\000\000\013\000\013\000\000\000\
\000\000\013\000\000\000\013\000\000\000\000\000\000\000\013\000\
\000\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\014\000\014\000\014\000\014\000\014\000\
\000\000\014\000\014\000\000\000\000\000\014\000\000\000\014\000\
\000\000\000\000\000\000\014\000\000\000\014\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\017\000\017\000\017\000\017\000\017\000\000\000\017\000\
\017\000\000\000\000\000\017\000\000\000\017\000\000\000\000\000\
\000\000\017\000\000\000\017\000\000\000\000\000\000\000\000\000\
\000\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
\018\000\018\000\000\000\000\000\018\000\000\000\018\000\000\000\
\000\000\000\000\018\000\000\000\018\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\000\000\015\000\015\000\000\000\
\000\000\015\000\000\000\015\000\000\000\000\000\000\000\015\000\
\000\000\015\000\000\000\016\000\016\000\016\000\016\000\016\000\
\016\000\000\000\016\000\016\000\000\000\000\000\016\000\000\000\
\016\000\044\000\044\000\000\000\016\000\044\000\016\000\044\000\
\000\000\000\000\000\000\044\000\000\000\044\000\043\000\043\000\
\000\000\000\000\043\000\000\000\043\000\000\000\000\000\000\000\
\043\000\000\000\043\000\000\000\019\000\019\000\000\000\000\000\
\019\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\019\000\033\000\033\000\000\000\000\000\033\000\034\000\034\000\
\029\000\029\000\034\000\033\000\029\000\033\000\000\000\000\000\
\000\000\000\000\034\000\000\000\029\000\000\000\000\000\000\000\
\000\000\000\000\027\000\027\000\000\000\000\000\027\000\000\000\
\028\000\028\000\000\000\000\000\028\000\000\000\027\000\000\000\
\000\000\000\000\000\000\000\000\028\000\032\000\032\000\000\000\
\000\000\032\000\000\000\000\000\004\000\005\000\006\000\000\000\
\000\000\032\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\043\000\
\004\000\005\000\006\000\044\000\014\000\058\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\000\000\000\000\000\000\011\000\
\000\000\000\000\000\000\043\000\004\000\005\000\006\000\044\000\
\014\000\099\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\043\000\
\004\000\005\000\006\000\044\000\014\000\105\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\000\000\049\000\000\000\011\000\
\000\000\000\000\000\000\043\000\004\000\005\000\006\000\044\000\
\014\000\000\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\000\000\000\000\089\000\011\000\000\000\000\000\000\000\043\000\
\004\000\005\000\006\000\044\000\014\000\000\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\000\000\000\000\000\000\011\000\
\000\000\090\000\000\000\043\000\004\000\005\000\006\000\044\000\
\014\000\000\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\000\000\000\000\000\000\011\000\000\000\091\000\000\000\043\000\
\004\000\005\000\006\000\044\000\014\000\000\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\000\000\000\000\000\000\011\000\
\000\000\107\000\000\000\043\000\004\000\005\000\006\000\044\000\
\014\000\000\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\000\000\000\000\000\000\011\000\000\000\000\000\000\000\043\000\
\004\000\005\000\006\000\044\000\014\000\000\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\000\000\000\000\000\000\011\000\
\000\000\000\000\000\000\043\000\004\000\005\000\006\000\000\000\
\014\000\000\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\004\000\005\000\006\000\011\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\014\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000"

let yycheck = "\030\001\
\000\000\028\001\001\000\028\001\015\001\007\000\008\000\009\000\
\010\000\034\001\015\001\024\001\014\000\002\001\024\001\002\001\
\030\001\033\001\024\001\026\001\028\001\033\001\015\001\024\001\
\024\001\015\001\000\000\029\000\030\000\031\000\032\000\033\000\
\031\001\035\000\000\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\015\001\026\001\001\001\048\000\049\000\
\050\000\051\000\081\000\000\001\001\001\002\001\003\001\255\255\
\255\255\006\001\007\001\255\255\009\001\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\027\001\
\021\001\255\255\076\000\024\001\025\001\033\001\255\255\255\255\
\029\001\083\000\255\255\255\255\033\001\087\000\255\255\089\000\
\090\000\091\000\000\000\093\000\001\001\002\001\003\001\097\000\
\255\255\255\255\255\255\255\255\255\255\013\000\255\255\015\000\
\106\000\107\000\018\000\019\000\020\000\021\000\255\255\255\255\
\255\255\255\255\026\000\024\001\028\000\255\255\000\000\255\255\
\001\001\002\001\003\001\255\255\033\001\255\255\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\046\000\255\255\
\255\255\255\255\255\255\255\255\001\001\002\001\003\001\024\001\
\255\255\255\255\000\000\059\000\060\000\061\000\062\000\063\000\
\033\001\065\000\255\255\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\074\000\024\001\255\255\077\000\078\000\079\000\
\080\000\030\001\255\255\255\255\033\001\255\255\000\000\255\255\
\088\000\255\255\255\255\255\255\255\255\255\255\094\000\255\255\
\255\255\255\255\098\000\255\255\100\000\101\000\102\000\103\000\
\104\000\255\255\255\255\255\255\108\000\109\000\000\001\001\001\
\002\001\003\001\000\000\255\255\006\001\007\001\255\255\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\021\001\255\255\255\255\024\001\025\001\
\001\001\002\001\003\001\029\001\255\255\255\255\000\000\033\001\
\034\001\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001\001\001\002\001\003\001\000\000\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\255\255\022\001\023\001\
\024\001\255\255\026\001\255\255\028\001\000\000\030\001\255\255\
\032\001\033\001\034\001\001\001\002\001\003\001\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\023\001\024\001\000\000\026\001\255\255\028\001\001\001\
\002\001\003\001\032\001\033\001\034\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\023\001\024\001\000\000\
\026\001\255\255\028\001\001\001\002\001\003\001\032\001\033\001\
\034\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\023\001\024\001\000\000\026\001\255\255\028\001\001\001\
\002\001\003\001\032\001\033\001\034\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\023\001\024\001\000\000\
\026\001\255\255\028\001\001\001\002\001\003\001\032\001\033\001\
\034\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\023\001\024\001\000\000\026\001\255\255\255\255\255\255\
\255\255\255\255\032\001\033\001\034\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\255\255\022\001\023\001\255\255\000\000\
\026\001\255\255\028\001\255\255\255\255\255\255\032\001\255\255\
\034\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\000\000\
\022\001\023\001\255\255\255\255\026\001\255\255\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\000\000\022\001\023\001\255\255\255\255\
\026\001\255\255\028\001\255\255\255\255\255\255\032\001\255\255\
\034\001\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\000\000\022\001\023\001\255\255\255\255\026\001\255\255\
\028\001\255\255\255\255\255\255\032\001\008\001\034\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\000\000\022\001\023\001\255\255\255\255\026\001\
\255\255\028\001\255\255\255\255\255\255\032\001\255\255\034\001\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\000\000\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\023\001\255\255\255\255\026\001\255\255\028\001\
\255\255\255\255\255\255\032\001\000\000\034\001\007\001\008\001\
\009\001\010\001\011\001\000\000\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\023\001\255\255\
\000\000\026\001\255\255\028\001\255\255\255\255\255\255\032\001\
\255\255\034\001\007\001\008\001\009\001\010\001\000\000\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\023\001\000\000\255\255\026\001\255\255\028\001\
\000\000\255\255\000\000\032\001\255\255\034\001\007\001\008\001\
\009\001\010\001\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\000\000\022\001\023\001\255\255\
\255\255\026\001\000\000\028\001\255\255\255\255\255\255\032\001\
\255\255\034\001\007\001\008\001\009\001\010\001\255\255\000\000\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\023\001\255\255\255\255\026\001\255\255\028\001\
\255\255\255\255\255\255\032\001\255\255\034\001\007\001\008\001\
\009\001\010\001\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\023\001\255\255\
\255\255\026\001\255\255\028\001\255\255\255\255\255\255\032\001\
\255\255\034\001\255\255\255\255\255\255\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\023\001\255\255\
\255\255\026\001\255\255\028\001\255\255\255\255\255\255\032\001\
\255\255\034\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\022\001\023\001\255\255\255\255\026\001\255\255\028\001\
\255\255\255\255\255\255\032\001\255\255\034\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\023\001\255\255\255\255\026\001\255\255\028\001\255\255\255\255\
\255\255\032\001\255\255\034\001\255\255\255\255\255\255\255\255\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\255\255\
\022\001\023\001\255\255\255\255\026\001\255\255\028\001\255\255\
\255\255\255\255\032\001\255\255\034\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\023\001\255\255\
\255\255\026\001\255\255\028\001\255\255\255\255\255\255\032\001\
\255\255\034\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\255\255\022\001\023\001\255\255\255\255\026\001\255\255\
\028\001\022\001\023\001\255\255\032\001\026\001\034\001\028\001\
\255\255\255\255\255\255\032\001\255\255\034\001\022\001\023\001\
\255\255\255\255\026\001\255\255\028\001\255\255\255\255\255\255\
\032\001\255\255\034\001\255\255\022\001\023\001\255\255\255\255\
\026\001\255\255\255\255\255\255\255\255\255\255\032\001\255\255\
\034\001\022\001\023\001\255\255\255\255\026\001\022\001\023\001\
\022\001\023\001\026\001\032\001\026\001\034\001\255\255\255\255\
\255\255\255\255\034\001\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\022\001\023\001\255\255\255\255\026\001\255\255\
\022\001\023\001\255\255\255\255\026\001\255\255\034\001\255\255\
\255\255\255\255\255\255\255\255\034\001\022\001\023\001\255\255\
\255\255\026\001\255\255\255\255\001\001\002\001\003\001\255\255\
\255\255\034\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\024\001\255\255\255\255\255\255\028\001\
\001\001\002\001\003\001\032\001\033\001\034\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\255\255\024\001\
\255\255\255\255\255\255\028\001\001\001\002\001\003\001\032\001\
\033\001\034\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\024\001\255\255\255\255\255\255\028\001\
\001\001\002\001\003\001\032\001\033\001\034\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\022\001\255\255\024\001\
\255\255\255\255\255\255\028\001\001\001\002\001\003\001\032\001\
\033\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\028\001\
\001\001\002\001\003\001\032\001\033\001\255\255\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\255\255\024\001\
\255\255\026\001\255\255\028\001\001\001\002\001\003\001\032\001\
\033\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\024\001\255\255\026\001\255\255\028\001\
\001\001\002\001\003\001\032\001\033\001\255\255\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\255\255\024\001\
\255\255\026\001\255\255\028\001\001\001\002\001\003\001\032\001\
\033\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\255\255\255\255\255\255\024\001\255\255\255\255\255\255\028\001\
\001\001\002\001\003\001\032\001\033\001\255\255\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\255\255\255\255\255\255\024\001\
\255\255\255\255\255\255\028\001\001\001\002\001\003\001\255\255\
\033\001\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\001\001\002\001\003\001\024\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\012\001\033\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\033\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  AST\000\
  SLASH_DOT\000\
  SLASH\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 66 "parser.mly"
    ( _2)
# 540 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
    ( Unit (Info.parsing_get())  )
# 546 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 70 "parser.mly"
    ( Bool(_1, (Info.parsing_get())) )
# 553 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 72 "parser.mly"
    ( Int(_1, (Info.parsing_get())  ))
# 560 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 74 "parser.mly"
    ( Float(_1, (Info.parsing_get()))  )
# 567 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 76 "parser.mly"
    ( Var(_1, (Info.parsing_get()) ) )
# 574 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 78 "parser.mly"
    ( Get(_1, _4, (Info.parsing_get()) ) )
# 582 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 82 "parser.mly"
    ( _1 )
# 589 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 85 "parser.mly"
    ( Not(_2, (Info.parsing_get())  ))
# 596 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 88 "parser.mly"
    ( match _2 with
    | Float(f, info) -> Float(-.f, (Info.parsing_get()))  (* -1.23などは型エラーではないので別扱い *)
    | e -> Neg(e, (Info.parsing_get()) ) )
# 605 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 92 "parser.mly"
    ( Add(_1,_3, (Info.parsing_get()))  )
# 613 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 94 "parser.mly"
    ( Sub(_1, _3, (Info.parsing_get())  ))
# 621 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
    ( Eq(_1, _3, (Info.parsing_get())  ))
# 629 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 98 "parser.mly"
    ( Not(Eq(_1, _3, (Info.parsing_get())), (Info.parsing_get())  ))
# 637 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
    ( Not(LE(_3, _1, (Info.parsing_get())  ), (Info.parsing_get())  ))
# 645 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    ( Not(LE(_1, _3, (Info.parsing_get())  ), (Info.parsing_get())  ))
# 653 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
    ( LE(_1, _3, (Info.parsing_get())  ))
# 661 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
    ( LE(_3, _1, (Info.parsing_get())  ))
# 669 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 109 "parser.mly"
    ( If(_2, _4, _6, (Info.parsing_get())  ))
# 678 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
    ( FNeg(_2, (Info.parsing_get())  ))
# 685 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
    ( FAdd(_1, _3, (Info.parsing_get())  ))
# 693 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
    ( FSub(_1, _3, (Info.parsing_get())  ))
# 701 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
    ( FMul(_1, _3, (Info.parsing_get())  ))
# 709 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 120 "parser.mly"
    (
        if _3 = 4 then
            Four(_1, Info.parsing_get ())
        else
            failwith (Printf.sprintf "%s: only support multiplication by 4" (Info.to_string (Info.parsing_get())))
    )
# 722 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 127 "parser.mly"
    ( FDiv(_1, _3, (Info.parsing_get())  ))
# 730 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 129 "parser.mly"
    (
        if _3 = 2 then
            Half (_1, Info.parsing_get())
        else
            failwith (Printf.sprintf "%s: only support division by 2" (Info.to_string (Info.parsing_get())))
    )
# 743 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 137 "parser.mly"
    ( Let((Id.gentmp (Type.Unit (Info.parsing_get())) (Info.parsing_get()), Type.Unit (Info.parsing_get())), Unit (Info.parsing_get()), _6, (Info.parsing_get())  ))
# 752 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 140 "parser.mly"
    ( Let(addtyp _2 (Info.parsing_get()), _4, _6, (Info.parsing_get())  ))
# 761 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 143 "parser.mly"
    ( LetRec(_3, _5, (Info.parsing_get())  ))
# 769 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 146 "parser.mly"
    ( App(_1, _2, (Info.parsing_get())  ))
# 777 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 148 "parser.mly"
    ( Tuple(_1, (Info.parsing_get())  ))
# 784 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 150 "parser.mly"
    ( LetTuple(_3, _6, _8, (Info.parsing_get())  ))
# 793 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 152 "parser.mly"
    ( Put(_1, _4, _7, (Info.parsing_get())  ))
# 802 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 154 "parser.mly"
    ( Let((Id.gentmp (Type.Unit (Info.parsing_get())) (Info.parsing_get()), Type.Unit (Info.parsing_get())), _1, _3, (Info.parsing_get())  ))
# 810 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 156 "parser.mly"
    ( Let((Id.gentmp (Type.Unit (Info.parsing_get())) (Info.parsing_get()), Type.Unit (Info.parsing_get())), _1, (Unit (Info.parsing_get())), (Info.parsing_get())  ))
# 817 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 159 "parser.mly"
    ( Array(_2, _3, (Info.parsing_get())  ))
# 825 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 161 "parser.mly"
    ( failwith
    (
        Printf.sprintf "%s: unknown expression" (Info.to_string (Info.parsing_get ()))
    )
       )
# 835 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 169 "parser.mly"
    ( { name = addtyp _1 (Info.parsing_get()); args = _2; body = _4 } )
# 844 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 173 "parser.mly"
    ( addtyp _1 (Info.parsing_get()) :: _2 )
# 852 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 175 "parser.mly"
    ( [addtyp _1 (Info.parsing_get())] )
# 859 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 180 "parser.mly"
    ( _1 @ [_2] )
# 867 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 183 "parser.mly"
    ( [_1] )
# 874 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 187 "parser.mly"
    ( _1 @ [_3] )
# 882 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 189 "parser.mly"
    ( [_1; _3] )
# 890 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 193 "parser.mly"
    ( _1 @ [addtyp _3 (Info.parsing_get())] )
# 898 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 195 "parser.mly"
    ( [addtyp _1 (Info.parsing_get()); addtyp _3 (Info.parsing_get())] )
# 906 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
