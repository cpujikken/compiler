#!/bin/sh

recompile_compiler=false
program=example
build="build"
log="${build}/log"
output="${build}/output.ppm"
input="contest.sld"

program_path=${1}
input_path=${2}

mkdir -p "${build}"

if [ -z $program_path ]; then
	echo "Usage: ./run <program path without .ml> [input file (optional)]"
	exit 1
fi;

if [ ! -f "${program_path}.ml" ]; then
	echo "File ${program_path}.ml does not exist. Exit"
	exit 1
fi

if [ ! -z $input_path ]; then
	if [ ! -f $input_path ]; then
		echo "File ${input_path} does not exist. Exit"
		exit 1
	fi
fi

if [ "$recompile_compiler" = true ]; then
	echo "Clean compiler..."
	make clean
	echo "Compile compiler..."
	make
	if [ $? -ne 0 ]; then
		echo "Compile compiler failed. Exit"
		exit 1
	fi
fi

cp "${program_path}.ml" "${build}/${program}.ml"

echo "Compile ${program_path}.ml..."
./min-caml "${build}/${program}" 2>"${log}"
if [ $? -ne 0 ]; then
	echo "Compile ${program}.ml failed. Exit"
	exit 1
fi

if [ ! -d "../assembler" ]; then
	echo "Assembler is not found. Exit"
	exit 1
fi

if [ ! -f "../assembler/lib.ml" ]; then
	echo "Library is not found. Exit"
	exit 1
fi

echo "Compile library..."
cp ../assembler/lib.ml "${build}/lib.ml"
./min-caml "${build}/lib" -lib true 2>>"${log}"

if [ $? -ne 0 ]; then
	echo "Compile library failed. Exit"
	cd ../compiler
	exit 1
fi

echo "Link library..."
cat "${build}/${program}.s" globals.s "${build}/lib.s" > "${build}/${program}-linked.s"
if [ $? -ne 0 ]; then
	echo "Link library failed. Check if ${program}.s, globals.s, lib.s exist. Exit"
	exit 1
fi

echo "Compile assembler..."
make -C ../assembler >>"${log}" 2>>"${log}"
if [ $? -ne 0 ]; then
	echo "Compile assembler failed. Exit"
	exit 1
fi

echo "Assemble..."
cp "${build}/${program}-linked.s" ../assembler/example.s
make test -C ../assembler >>"${log}" 2>>"${log}"
if [ $? -ne 0 ]; then
	echo "Assemble program failed. Exit"
	exit 1
fi

if [ ! -d "../Simulator" ]; then
	echo "simulator is not found. Exit"
	exit 1
fi

cp ../assembler/example_label "${build}/${program}_label"
cp ../assembler/example "${build}/${program}"
if [ $? -ne 0 ]; then
	echo "Cannot copy file. Exit"
	exit 1
fi

echo "Clean simulator..."
make clean -C ../Simulator >>"${log}" 2>>"${log}"

echo "Compile simulator..."
make -C ../Simulator >>"${log}" 2>>"${log}"
if [ $? -ne 0 ]; then
	echo "Compile simulator failed. Exit"
	exit 1
fi

if [ -f "${input_path}" ]; then
	cp "${input_path}" "${input}"
else
	rm -f "${input}"
fi
echo "Run program..."
../Simulator/bsim "${build}/${program}"
if [ $? -ne 0 ]; then
	echo "Simulate program failed. Exit"
	exit 1
fi

cp "${build}/${program}_out" "${output}"
echo "Show running result..."
cat "${output}"
